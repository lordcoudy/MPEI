pragma solidity ^0.5.13;

contract Compaign {
    address public manager;
    uint public minimumContribution;
    uint public approversCount;
    //address[] public approvers;
    mapping(address => bool) public approvers;
    
    modifier restricted() {
        require(msg.sender == manager);
        _;
        
    }

    struct Request {
        string description;
        uint value;
        address payable recipient;
        bool complete;
        uint approvalCount;
        mapping(address => bool) approvals;
    }

    Request[] public requests;

    constructor (uint minimum) public
    {
      manager = msg.sender;
      minimumContribution = minimum;
      approversCount = 0;
    }
    
    function contribute() public payable {
        require(msg.value > minimumContribution);
        
        approvers[msg.sender] = true;
        approversCount++;
        
    }
    function createRequest(string memory description, uint value, address payable recipient) 
       public restricted 
       {
           Request memory newRequest = Request ({
              description:  description,
              value: value,
              recipient: recipient,
              complete: false,
              approvalCount: 0
              
           });
           
           requests.push(newRequest);
       }
       function approveRequest(uint index) public {
           Request storage request = requests[index];
           
           require(approvers[msg.sender]);
           require(!request.approvals[msg.sender]);
           
           request.approvals[msg.sender] = true;
           request.approvalCount++;
           
       }

       function finalizeRequest(uint index) public restricted {
          
           Request storage request = requests[index];
           require (request.approvalCount > (approversCount / 2));
           require(!request.complete);
           
           request.recipient.transfer(request.value);
           request.complete = true;           
           
       }
}