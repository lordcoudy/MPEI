; А-08-19
; Балашов Савва
; Лаб 1
; Вариант 4 - воспроизведение по нотам Гаудеамуса

.model small
.stack 100h
.data	; Сегмент данных (резервируем память под данные и инициализируем их с помощью директивы dw - 2 байта)
	TIME dw 4, 4, 4, 3, 1, 4, 3, 1, 8, 4, 4, 4, 3, 1, 4, 3, 1, 8, 4, 3, 1, 4, 3, 1, 1, 1, 2, 2, 4, 3, 1, 1, 1, 2, 2, 4, 3, 1, 4, 3, 1, 8, 4, 3, 1, 4, 3, 1, 1, 1, 2, 2, 4, 3, 1, 1, 1, 2, 2, 4, 3, 1, 4, 3, 1, 8; длительности нот (в 1/16 ноты)
	FREQ dw 392, 392, 392, 311, 466, 392, 311, 466, 392, 587, 587, 587, 622, 466, 370, 311, 466, 392, 784, 392, 392, 784, 740, 698, 659, 622, 659, 415, 554, 523, 494, 466, 440, 466, 311, 392, 311, 392, 466, 392, 466, 587, 784, 392, 392, 784, 740, 698, 659, 622, 659, 415, 554, 523, 494, 466, 440, 466, 311, 392, 311, 392, 466, 311, 466, 392, 0FFFFh 	; частоты нот в Гц

.code
; Процедура Sound

Sound proc			; Начало процедуры
	; Загоняем содержимое регистров в стек - (аля бэкап данных)
	push ax			; Загнали регистр ax в стек
	push bx			; -""- bx в стек
	
	; Вычисление коэф К
	; K = Fclc/f
	mov di, ax		; Копируем в индекс назначения регистр ax
	mov dx, 12h		; Копируем в регистр данных значение 12 в шестнадцатиричной сс
	mov ax, 2870h	; Копируем в аккумулятор значение 2870 в ш сс
	div di		;результат К в ax (di делится на ax)

	;Загрузка в счетчик 2 таймера (младший и старший)
	out 42h,al		; загружаем младшие разряды
	mov al, ah		; напрямую передать старшие передать нельзя, перемещаем в младшие
	out 42h,al		; загружаем перемещенные старшие разряды

	;Включение динамика
	in al, 61h      ; Сохраняем состояние порта 61h (динамик) в младшем байте регистра ax 
    or al, 3 		
    out 61h, al 	; Выводим данные из младшего байта в порт, тем самым активируя динамик (по факту подаем на g1 g2 0 0 и выбираем 011 выход дешифратора)

	; Программная задержка
	mov ax, 250
	mul bx		; результат в ах

	
	mov bx, 500		; Множитель записываем в базовый регистр
	mul bx			; ax * 500, результат записан в dx:ax
	; Кол-во микросекунд длительности ноты находится в dx:ax
	call Delay		; Вызов процедуры задержки
	
	;Выключение динамика
        mov al, ah		; Сброс младшего байта, путем перезаписи в него старшего
        out 61h, al 	; Вывод данных из младшего байта в порт для выключения динамика

	;Восстановление РОНов
	pop bx			; Загрузка в регистры их значений из стека
	pop ax
ret	
Sound endp

Delay proc			; Задержка
	mov cx, dx		; Копирование регистра данных в регистр кода
	mov dx, ax		; Копирование регистра ax в регистр данных
	mov ah, 86h		; команда ожидания (system wait)
	mov al, 0
	int 15h			; Прерываем процессор на выжидание задержки
ret
Delay endp

; Основная подпрограмма
start:
	mov ax, @data	; Копирование в аккумулятор данных
	mov ds, ax		; Установка ds на начало сегмента данных
	mov si, 0		; Установка индекса на 1й элемент массива
	
	; Установка режима таймера (sc 10 (канал 2), rl 11 (чтение обоих байтов), m2 x, m1 1, m0 1 (режим 3 - меандр), bcd 0 (16 битный счетчик))
	mov al, 10110110b	; Запись кодового слова режима работы таймера
	out 43h, al		; Передача кода работы таймеру

	lea si, TIME	; Запись в индекс адреса длительности
	mov bx, si		; Копирование в базовый регистр индекса
	lea si, FREQ	; Запись в индекс адреса частоты

playLoop:	; Цикл проигрыша мелодии
	
	mov ax, [si] 	; Копирование частоты выбранной ноты в регистр для дальнейшего использования
	
	cmp ax, 0FFFFh	; Сравниваем с условием конца массива
	je exit			; Если да, то выход из цикла, конец мелодии

	push si			; Бэкап индекса
	push bx			; Бэкап регистра базы

	mov si, bx		; Запись в индекс значение регистра
	mov bx, [si]	; Копируем значение из индекса в регистр базы
	
	call Sound		; Запускаем процедуру Sound

	pop bx			; Восстанавливаем сохраненное значение регистра базы
	pop si			; Аналогично индекс

	; Следующий цикл
	add bx, 2		; Переход к следующему элементу массива
	add si, 2 		
	jmp playLoop	; повтор цикла

exit:
	mov ax, 4C00h	; Команда выхода (QUIT WITH EXIT CODE)
	int 21h			; Прервать выполнение

end start
