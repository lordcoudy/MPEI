; А-08-19, Балашов
; Лаб 6, Вариант 4
; Локальные данные в процедурах.

.model small	
.stack 100h	

; Сегмент данных
.data	
str0	db 'Pre-edited string: $'
str1 	db 'Edited string: $'
String 	db 17, 'te s t str in g !kjdshf', '$'
Result 	db ?

	exec EQU int 21h
	stout EQU 09h
	q EQU 4C00h

.code

; --------- Процедура проверки на наличие пробела ---------
; 			Получает ax, bp, sp
;			Локальные данные space - символ пробела
;			Портит значения zf, ax
SpaceCheck	proc
	
local space :word = len			; Локальные данные в стеке [bp - 4]
	;[bp - 4]

	; Сохраняем bp и освобождаем в sp место для локальных данных
	push bp
	mov bp, sp
	sub sp, len

	;enter 2, 0 				; Аналог 3-х команд в .286
	mov space, 32				; Локальные данные размером 2 байта, символ пробела
	
	mov dx, [bp + 4]			; Берем из стека значение ax и помещаем в dx
	cmp dx, space				; Сравнение кода символа и кода пробела
	
	; Восстанавливаем sp и bp
	mov sp, bp
	pop bp
	ret

SpaceCheck endp

; --------- Макрос вывода сообщения ---------
Print	macro	str
	
	mov ah, stout
	mov dx, offset str
	exec

endm


; --------- Основная программа ---------
start:

	mov ax, @data				; Загрузка данных в регистр
	mov ds, ax					; Регистр настроен на начало сегмента данных
	mov es, ax					; И на доп сегмент
	xor ax, ax					; Очистка регистра AX

	; Настраиваем смещения для строковых команд
	mov si, offset String
	mov di, offset Result

	; Настройка регистров на начало строк
	cld							; Флаг направления обнулен -> движение в сторону увеличения адреса
	lodsb						; Загрузка первого байта массива, в котором лежит длина строки
	mov cx, ax					; Длина строки копируется в регистр цикла
	xor ax, ax					; Очистка регистра AX

	; Помещение в начало строки временного размера
	mov ax, 0
	stosb

	; Цикл проверки символа на пробел
	cycle:
		lodsb					; Загружаем из строки символ
		push ax					; Помещаем символ в стек
		call SpaceCheck			; Вызов процедуры
		je m1					; Прыжок на начало без записи пробела во сторую строку
		stosb					; Добавление символа в выходную строку

	m1:
		Loop cycle 				; Повтор цикла, пока не обнулится регистр цикла


; Вывод результатов
out_way:

	; Запоминаем смещение выходной строки
	mov bx, di

	; Запись в конец второй строки $
	mov ax, 24h					
	stosb

	; Помещаем в аккумулятор смещение Result, а в базу смещение в начало Result
	mov ax, bx
	mov bx, offset Result

	; Вычитаем из конца смещения начало и сохраняем в аккумуляторе размер строки
	sub ax, bx

	; Переводим смещение команды записи на начало Result
	mov di, bx
	; Загружаем туда размер строки
	stosb

	; Вывод начальной строки
	Print str0
	Print String
	
	; Перенос строки
	mov ah,2   					; Код системной функции вывода на экран
	mov dl, 10		        	; Код переноса строки в регистр
   	exec  						; Вывод переноса строки

	; Вывод обработанной строки 
	Print str1
	Print Result

	; Завершение
	mov ax, q					; Код возврата
	exec						; Снять программу с выполнения
	
end start