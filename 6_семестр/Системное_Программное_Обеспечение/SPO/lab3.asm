; Алябьев В.О. А-07-18
; Вариант 1

; Задан массив двухбайтовых целых чисел со знаком. Рассчитать среднее значение элементов
; массива. Применить различные типы данных и способы адресации, объявление данных в
; различных сегментах, директивы EQU и =, выражения, содержащие символические имена.
; Массив и результаты вывести на экран.

.model small	;по 1 сегменту стека, кода, данных
.stack 100h	;сегмент стека (256 байт)
.data		;сегмент данных
	mass dw 5, 15, 3, 2		;массив чисел
	MassLen dw 4				;длина массива
	TrowNumber EQU call NumToString	;процедура вывода числа на экран
	step = 2	;шаг, необходимый для перехода между двубайтовыми числами
	
	mess1 db 'Array:$'	;Объявление строк, которые будут использованы
	mess2 db 'Number of elements: $'	;для вывода результатов
	mess3 db 'Average: $'
	mess4 db 'Remain: $'
.code		;сегмент кода

	;Объявление данных в сегменте кода
	sum dw 0		;сумма массива
	average dw 0		;среднее арифметическое
	remain dw 0		;остаток

;--------------Процедура перевода числа в строку и вывод-------------------

NumToString:	;начало процедуры
	;Число, которое необходимо вывести находится в ax		

	;Сохраняем регистры в стек
	push ax
	push bx
	push cx
	push dx

	;Вывод знака числа

	test ax, 8000h		; проверяем наличие 1 в первом бите (отрицательное число)
	jz noSign		; если 0, то число положительное, не выводим минус
	push ax			; сохранение числа в стек

 	mov    dl, 45           ; поместить код минуса в DL
   	mov    ah,2             ;
   	int    21h              ; вывести на экран минус

	pop ax			; возврат из стека
	and	ax, 7FFFh	;уничтожаем знаковый разряд, чтобы не мешался

noSign:

	xor     cx, cx	; очистка регистра cx (в нем будем считать число цифр)
    	mov     bx, 10 	; основание ситемы счисления в bx
m1:
	;Делим число на основание СС, в остатке (dx) выходит последняя цифра
	xor     dx,dx	; очищаем прошлый остаток
    div     bx	; делим и получаем новый

    push    dx	; сохраняем в цифру в стек
    inc     cx	; увеличиваем число цифр

    test    ax, ax 	; проверяем, не равно ли число нулю
			; если 0, то выходим из цикла
jnz m1
	
	; Вывод числа на экран
	mov     ah, 02h

m2:
    pop     dx	; достаем цифру из стека
    add     dl, '0'	; переводим ее в символ
    int     21h	; вызов прерывания для вывода
	; Цикл повторится столько раз, сколько было насчитано цифр
	
loop m2
	;Возвращаем значения регистров из стека
	pop dx
	pop cx
	pop bx
	pop ax

ret		; возврат из процедуры

;----------------------- Основное тело программы ----------------------------
start:

	;Начальная инициализация
	mov ax, @data	
	mov ds, ax	; Регистр DS настроен на начало сегмента данных
	xor ax, ax	; Очищаем регистр AX

	mov si, offset mass	; Настройка регистра SI на 1 элемент массива
	mov cx, MassLen		; Задаем число эл-в массива

	;Поиск суммы
AddLoop:
	mov bx, [si]	; Заносим в bx эл-т массива
	add ax, bx	; и добавляем к сумме.
	add si, step		; Переходим к следующей ячейке памяти (2 байта)

Loop AddLoop
	mov sum, ax	; Сохранение в переменную
	; Получение среднего арифиметического

	xor dx, dx
	idiv MassLen
	mov average, ax
	mov remain, dx

	; Вывод результатов

	xor ax, ax		; Очистка регистра
	mov si, offset mass	; Настройка регистра SI на 1 элемент массива
	mov cx, MassLen		; Задаем число эл-в массива
	
	;Вывод каждого числа массива
	
	mov ah, 09h		; Вывод сообщения 1
	mov dx, offset mess1
	int 21h

	xor ax, ax
	xor dx, dx

	mov    dl, 10	        ; поместить код переноса строки в DL
   	mov    ah,2             ;
   	int    21h              ; переход на новую строку

MassOutLoop:
	mov ax, [si]	; Заносим в bx эл-т массива
	TrowNumber		; Вызов процедуры вывода числа на экран
	add si, step		; Переходим к следующей ячейке памяти

	xor ax, ax
	xor dx, dx

 	mov    dl, 32	        ; поместить код пробела в DL
   	mov    ah,2             ;
   	int    21h              ; вывести пробел между элементами

Loop MassOutLoop

	xor ax, ax
	xor dx, dx

	mov    dl, 10	        ; поместить код переноса строки в DL
   	mov    ah,2             ;
   	int    21h              ; переход на новую строку

	;Вывод числа элементов массива

	xor ax, ax		; очистка ax
	mov ah, 09h		; Вывод сообщения 2
	mov dx, offset mess2
	int 21h

	mov ax, MassLen
	TrowNumber

	mov    dl, 10	        ; поместить код переноса строки в DL
   	mov    ah,2             ;
   	int    21h              ; переход на новую строку
	
	;Вывод среднего арифметического
	
	xor ax, ax		; очистка ax
	mov ah, 09h		; Вывод сообщения 3
	mov dx, offset mess3
	int 21h

	mov ax, average
	TrowNumber

	mov    dl, 10	        ; поместить код переноса строки в DL
   	mov    ah,2             ;
   	int    21h              ; переход на новую строку

	;Вывод остатка

	xor ax, ax		; очистка ax
	mov ah, 09h		; Вывод сообщения 4
	mov dx, offset mess4
	int 21h

	mov ax, remain
	TrowNumber

	;Завершение
	mov ax, 4C00h	;Код возврата
	int 21h		;Снять программу с выполнения
	
end start; Конец программы