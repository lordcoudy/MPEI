program LR8;

uses windows,messages;
var
   strArr:array[1..10]of string[20]=('00000000000000000000','11111111111111111111',
  '22222222222222222222','33333333333333333333','44444444444444444444',
  '55555555555555555555','66666666666666666666','77777777777777777777',
  '88888888888888888888','99999999999999999999');
   i:byte;
   strBuff: string[20];
   hSema, hThreadB, hThreadC: THandle;
   idThreadB, idThreadC,statusb, statusc: dword;
   flag: boolean;

function ThreadFunctionB(data: pointer):dword; stdcall;
var i:integer;
begin
  while (flag) do
    begin
      WaitForSingleObject(hSema, INFINITE);
      strbuff:=strArr[1];
      for i:=1 to 9 do
        strArr[i]:=strArr[i+1];
      strArr[10]:=strBuff;
      ReleaseSemaphore(hSema,1,nil)
    end;
end;

function ThreadFunctionC(data: pointer):dword; stdcall;
var a,b:byte;
begin
  while (flag) do
    begin
      WaitForSingleObject(hSema, INFINITE);
      a:=random(10)+1;
      repeat
        b:=random(10)+1;
      until a<>b;
      strbuff:=strArr[a];
      strArr[a]:=strArr[b];
      strArr[b]:=strbuff;
      ReleaseSemaphore(hSema,1,nil)
    end;
end;


function WndProc(hWnd: THandle; Msg: integer; wParam: longint; lParam: longint): longint; stdcall;
var
   hdc:THandle;
begin
 result:=0;
  case Msg of
    wm_create:
      SetTimer(hwnd,1,1000,nil);
    wm_timer:
      begin
        WaitForSingleObject(hSema, INFINITE);
        hdc:=GetDC(hwnd);
        for i:=1 to 10 do
          TextOut(hdc,10,(i+1)*15,pwidechar(strArr[i]),20);
        ReleaseDC(hwnd,hdc);
        ReleaseSemaphore(hSema,1,nil);
      end;
    wm_close:
      begin
        flag:=false;
        repeat
          GetExitCodeThread(hThreadB, statusb);
          GetExitCodeThread(hThreadC, statusc);
        until (statusb<>STILL_ACTIVE) and (statusc<>STILL_ACTIVE);
        killTimer(hwnd,0);
        closeHandle(hThreadB);
        closeHandle(hThreadC);
        CloseHandle(hSema);
        DestroyWindow(hWnd);
      end;

    wm_destroy:
        PostQuitMessage(0);
    else
      result:=DefWindowProc(hwnd,msg,wparam,lparam);
  end;
end;

procedure WinMain;
const
   szClassName='LR8';
 var
   msg:TMsg;
   wndClass:TWndClassEx;
   hWnd: THandle;

begin
  wndClass.cbSize:=sizeof(wndClass);
  wndClass.style:=cs_hredraw or cs_vredraw;
  wndClass.lpfnWndProc:=@WndProc;
  wndClass.cbClsExtra:=0;
  wndClass.cbWndExtra:=0;
  wndClass.hInstance:=hPrevInst;
  wndClass.hInstance:=hInstance;
  wndClass.hIcon:=loadIcon(0, idi_Application);
  wndClass.hCursor:=loadCursor(0, idc_Arrow);
  wndClass.hbrBackground:=GetStockObject(white_Brush);
  wndClass.lpszMenuName:=nil;
  wndClass.lpszClassName:=szClassName;
  wndClass.hIconSm:=loadIcon(0, idi_Application);

  RegisterClassEx(wndClass);
  hwnd:=CreateWindowEx(
         0,
         szClassName, {имя класса окна}
         'Механизм семафоров',    {заголовок окна}
         ws_overlappedWindow,     {стиль окна}
         cw_usedefault,               {Left}
         cw_usedefault,                {Top}
         500,                     {Width}
         300,                     {Height}
         0,                       {хэндл родительского окна}
         0,                       {хэндл оконного меню}
         hInstance,               {хэндл экземпляра приложения}
         nil);                    {параметры создания окна}

  ShowWindow(hwnd,sw_Show);  {отобразить окно}
  updateWindow(hwnd);

  hSema:=CreateSemaphore(nil,1,1,'MySemaphore');
  hThreadB:=CreateThread(nil, // флаги защиты, поддерживаются только в NT
                        0, // стандартный размер стека
                        @ThreadFunctionB, // функция потока
                        nil, // аргумент при старте ф-ции потока
                        0, // флаги создания, по умолчанию -- немедленный запуск
                        idThreadB);

  hThreadC:=CreateThread(nil, // флаги защиты, поддерживаются только в NT
                        0, // стандартный размер стека
                        @ThreadFunctionC, // функция потока
                        nil, // аргумент при старте ф-ции потока
                        0, // флаги создания, по умолчанию -- немедленный запуск
                        idThreadC);
  randomize;
  flag:=true;
  while GetMessage(msg,0,0,0) do begin {получить очередное сообщение}
     TranslateMessage(msg);   {Windows транслирует сообщения от клавиатуры}
     DispatchMessage(msg);    {Windows вызовет оконную процедуру}
  end; {выход по wm_quit, на которое GetMessage вернет FALSE}
end;

begin
  WinMain
end.