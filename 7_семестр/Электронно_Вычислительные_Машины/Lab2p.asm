.model small
.stack 100h
.data
my_mem DB 0
IRQ7 EQU 0Fh  						; Вторая команда инициализации контроллера 
									; Вектор смещения в таблице прерываний
									; Смещения обработчика
offset_interupt EQU 100h

.code
start:
	mov ax, @data
	mov ds, ax 
	cli								; Запрещаем прерывания
									; Записываем в память векторов прерываний
	push es      					; Сохраняем es
	xor ax, ax
	mov es, ax      				; Обнуляем es

	mov es:[IRQ7], offset_interupt	; Заносим смещение обработчика прерывания
	mov es:[IRQ7+2], cs         	; Заносим сегментную часть адреса 

	pop es      					; Восстанавливаем es
	sti

	mov dx, 37Ah
	in ax, dx
	and ax, 00010000b				; Прерывание вкл.
	out dx, ax

org  offset_interupt				; Считываем состояние конечных выключателей каждое прерывание
	
	mov dx,37AH						; В регистре управления
	in ax, dx
	and ax,00011000b				; Активируем биты RQ и SLCT (старшая часть)
	out dx,ax						; Инициализируем регистр
	
	mov dx,379H						; Из регистра состояния
	in ax,dx 						; Считываем старшую часть в ах
	and ax,01111000b 				; Идея, чтобы отсечь 4 нужных бита и занулить неиспользуемые 
	mov bx,ax						; Скопировали в bx
	shl bx,1						; Сдвинули в старшие 4 бита
	
	mov dx,37AH						; В регистре управления
	in ax, dx
	xor ax, 00001000b   			; Выставляем SLCT в 0
	out dx,ax						; Инициализируем регистр
	
	mov dx,379H						; Из регистра состояния
	in ax,dx 						; Считываем младшую часть в ах
	and ax,01111000b 				; Идея, чтобы отсечь 4 нужных бита и занулить неиспользуемые
	shr ax, 3 						; Чтобы 4 младших бита из 379h переместились в 4 младших бита в ах
	or ax,bx            			; Получаем 8 бит - состояния конечных выключателей
	
	; 5 уникальных состояния конечных выключателей согласно циклограмме:
	test al, 01010101b 	; В такт 0
	jz tact0
	test al, 01011001b	; В такт 1-7
	jz tact1
	test al, 01011010b	; В такт 2-6
	jz tact2
	test al, 01101010b	; В такт 3-5
	jz farjmp1
	test al, 10100101b	; В такт 4
	jz farjmp2

	farjmp1:
	jmp tact3
	
	farjmp2:
	jmp tact6

tact0:								; При старте попадаем в tact 0
	mov dx, 378h					; 378h - регистр данных 
	in ax, dx						; Загружаем состояние портов в ах
	or ax, 00000010b				; Изменяем светодиодную индикацию по циклограмме tact0
	out dx, ax						; Инициализируем регистр данных
	
	mov dx, 37Ah					; 37Ah - регистр управления
	in ax, dx
	and ax, 00010001b				; Отправляем сигнал, активирующий сигналы IRQ (4ый бит) и STROBE (0ой бит)
	out dx, ax						; Инициализируем регистр управления
	jmp exit
	
tact1:
	mov al, my_mem			
	and al, 00000010b				; Проверка, были ли мы уже в этом такте
	test al,11111101b
	jz tact7						; Если были, значит переходим на второе повторяющееся состояние конечнных выключателей

	mov dx, 378h					; 378h - регистр данных 
	in ax, dx
	or ax, 00000001b				; Индикация по циклограмме tact1
	out dx, ax
	
	mov dx, 37Ah					; 37Ah - регистр управления
	in ax, dx
	and ax, 00010001b				; Подаем IRQ (4ый бит) и STROBE (0ой бит)
	out dx, ax
	or my_mem,00000010b				; Поднимаем соответствующий бит флага
	jmp exit						; Повторяющееся состояние конечнных выключателей

tact7:
	mov dx, 378h					; 378h - регистр данных 
	in ax, dx
	and ax, 00000000b				; Возвращаемся в начальное состояние
	out dx, ax
	
	mov dx, 37Ah					; 37Ah - регистр управления
	in ax, dx
	and ax, 00010001b				; Подаем IRQ (4ый бит) и STROBE (0ой бит)
	out dx, ax
	and my_mem, 00000000b			; Сбрасываем флаг
	jmp exit

tact2:	
	mov al, my_mem			
	and al, 00000100b				; Проверка, были ли мы уже в этом такте
	test al,11111011b
	jz tact6

	mov dx, 378h					; 378h - регистр данных 
	in ax, dx
	or ax, 00000100b				; Индикация по циклограмме tact2
	out dx, ax
	
	mov dx, 37Ah					; 37Ah - регистр управления
	in ax, dx
	and ax, 00010001b				; Подаем IRQ (4ый бит) и STROBE (0ой бит)
	out dx, ax
	or my_mem,00000100b				; Поднимаем соответствующий бит флага
	jmp exit

tact6:
	mov dx, 378h					; 378h - регистр данных 
	in ax, dx
	and ax, 00001110b				; Индикация по циклограмме tact6
	out dx, ax
	
	mov dx, 37Ah					; 37Ah - регистр управления
	in ax, dx
	and ax, 00010001b				; Подаем IRQ (4ый бит) и STROBE (0ой бит)
	out dx, ax
	jmp exit

tact3:
	mov al,my_mem
	and al, 00001000b				; Проверка, были ли мы уже в этом такте
	test al,11110111b
	jz tact5						; Если были, значит переходим на второе повторяющееся состояние конечнных выключателей

	mov dx, 378h					; 378h - регистр данных 
	in ax, dx
	or ax, 00001111b				; Индикация по циклограмме tact3
	out dx, ax
	
	mov dx, 37Ah					; 37Ah - регистр управления
	in ax, dx
	and ax, 00010001b				; Подаем IRQ (4ый бит) и STROBE (0ой бит)
	out dx, ax
	or my_mem,00001000b				; Поднимаем соответствующий бит флага
	jmp exit


tact5:
    	mov al,my_mem		
	and  al,00100000b				; Проверка, были ли мы уже в этом такте
	test al,11011111b	
	jz tact7						; Если были, значит переходим на второе повторяющееся состояние конечнных выключателей

	mov dx, 378h					; 378h - регистр данных 
	in ax, dx
	and ax, 00001011b				; Индикация по циклограмме tact5
	out dx, ax						; Проходим на tact2
	
	mov dx, 37Ah					; 37Ah - регистр управления
	in ax, dx
	and ax, 00010001b				; Подаем IRQ (4ый бит) и STROBE (0ой бит)
	out dx, ax
	or my_mem,00100000b				; Поднимаем соответствующий бит флага
	jmp exit

tact4:
	mov dx, 378h					; 378h - регистр данных 
	in ax, dx
	and ax, 00000111b				; Индикация по циклограмме tact4
	out dx, ax
	
	mov dx, 37Ah					; 37Ah - регистр управления
	in ax, dx
	and ax, 00010001b				; Подаем IRQ (4ый бит) и STROBE (0ой бит)
	out dx, ax
	jmp exit

exit:
mov al, 20h
out 20h, al
iret								; iret - возврат из прерывания
end